---
description: GitHub规则集 - 提供代码提交和仓库管理指南
globs: ["*.md", "*.sh", "*.js", "*.html", "*.css", "*.json"]
alwaysApply: true
---

# GitHub仓库管理规则

## 仓库信息
- 用户名: shuggg999
- 仓库名: servermaster
- 主分支: main
- 安装地址: `bash <(curl https://install.ideapusher.cn/shuggg999/servermaster/main/install.sh)`

## 提交规则
1. 每次提交必须包含详细的修改说明，包括修改内容、目的和影响
2. 提交信息格式: `[模块名称] 变更类型: 详细描述`
   - 变更类型: `feat`, `fix`, `improve`, `refactor`, `docs`, `style`, `test`, `chore`
   - 例如: `[main] feat: 添加Dialog支持的菜单界面`

3. 代码提交前应当进行本地测试，确保功能正常

## 分支管理
- 主分支: `main` - 用于稳定发布
- 开发分支: `dev` - 用于日常开发
- 功能分支: `feature/功能名` - 用于新功能开发
- 修复分支: `fix/问题描述` - 用于修复特定问题

## 版本管理
- 使用语义化版本号: `主版本.次版本.修订号`
- 每次发布版本需要更新 `version.txt` 文件

## 提交自动化
- 每次提交必须自动生成详细的修改内容清单
- 提交前应自动检查代码格式和最佳实践
- 大型更新应创建独立分支，通过Pull Request合并

## 文件命名规范
- 脚本文件: 使用小写和下划线 (例如: `system_info.sh`)
- 配置文件: 使用小写和下划线 (例如: `server_config.json`)
- 模块目录: 使用小写，表示功能分类 (例如: `modules/system/`)

## 代码规范
- Bash脚本使用4空格缩进
- 函数和变量使用有意义的名称
- 重要函数添加注释说明用途和参数
- Dialog界面保持视觉一致性，统一窗口大小

## 安全规范
- 不要在代码中硬编码敏感信息
- 脚本执行前验证参数和环境
- 使用安全的API调用方式
